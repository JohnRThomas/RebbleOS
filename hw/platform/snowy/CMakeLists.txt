# Check for the fpga file. If it isn't there, don't allow snowy to be built. 
if(NOT EXISTS ${PROJECT_SOURCE_DIR}/Resources/snowy_fpga.bin)
    message(WARNING "${PROJECT_SOURCE_DIR}/Resources/snowy_fpga.bin not found. Unable to generate snowy platform. Check the pinned messages on the Rebble Discord Server to find this file.")
    return()
endif()

set(fpga_file ${PROJECT_SOURCE_DIR}/Resources/snowy_fpga.bin)
set(packaged_fpga_file ${CMAKE_BINARY_DIR}/snowy_fpga.o)

# TODO move the fpga file into the platform directory so the Resources directory isn't needed. Probably should wait to move this until the platform dir is moved to the top level
# Since the fpga object file is not generated by the C compiler, make a custom generator command and wrap the resulting .obj file in a library target that can be used to link it into snowy.a.
add_custom_command (
   DEPENDS ${fpga_file}
   OUTPUT  ${packaged_fpga_file}
   COMMAND ${CMAKE_OBJCOPY} 
   ARGS --rename-section .data=.rodata,contents,alloc,load,readonly,data
        -I binary -O elf32-littlearm -B armv5te ${fpga_file} ${packaged_fpga_file}
   COMMENT "Repackaging FPGA file")
add_custom_target(fpga DEPENDS ${packaged_fpga_file})

# Make a wrapper for that custom target so that cmake can link against the resulting library.
add_library(fpga_obj OBJECT IMPORTED)
add_dependencies(fpga_obj fpga)
set_target_properties(fpga_obj PROPERTIES IMPORTED_OBJECTS ${packaged_fpga_file})

add_subdirectory(../snowy_family/ snowy/family)

# Set up the snowy target
set(src_files snowy.c snowy_bluetooth.c)
add_library(snowy STATIC ${src_files})
target_include_directories(snowy PUBLIC ./)
target_link_libraries(snowy snowy_family)
target_compile_options(snowy PRIVATE -DHSI_VALUE=16000000 -DREBBLE_PLATFORM=snowy -DREBBLE_PLATFORM_SNOWY)
